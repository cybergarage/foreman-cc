/******************************************************************
 *
 * Foreman for C++
 *
 * Copyright (C) 2017 Satoshi Konno. All rights reserved.
 *
 * This is licensed under BSD-style license, see file COPYING.
 *
 ******************************************************************/

#include <foreman/Const.h>
#include <foreman/register/impl/MemStore.h>

using namespace Foreman::Register;

////////////////////////////////////////////////
// MemStore
////////////////////////////////////////////////

MemStore::MemStore()
{
}

MemStore::~MemStore()
{
}

////////////////////////////////////////////////
// getVersion
////////////////////////////////////////////////

const char* MemStore::getVersion()
{
  return FOREMANCC_PRODUCT_VERSION;
}

////////////////////////////////////////////////
// getType
////////////////////////////////////////////////

const char* MemStore::getType()
{
  return "MemStore";
}

////////////////////////////////////////////////
// clear
////////////////////////////////////////////////

bool MemStore::clear()
{
  ObjectMap::clear();
  return true;
}

////////////////////////////////////////////////
// open
////////////////////////////////////////////////

bool MemStore::open()
{
  return true;
}

////////////////////////////////////////////////
// isOpened
////////////////////////////////////////////////

bool MemStore::isOpened()
{
  return true;
}

////////////////////////////////////////////////
// close
////////////////////////////////////////////////

bool MemStore::close()
{
  return true;
}

////////////////////////////////////////////////
// close
////////////////////////////////////////////////

bool MemStore::setObject(Object* obj, Error* err)
{
  return ObjectMap::set(*obj);
}

////////////////////////////////////////////////
// close
////////////////////////////////////////////////

bool MemStore::getObject(const std::string& key, Object* obj, Error* err)
{
  return ObjectMap::get(key, obj);
}

////////////////////////////////////////////////
// close
////////////////////////////////////////////////

bool MemStore::removeObject(const std::string& key, Error* err)
{
  return ObjectMap::remove(key);
}
