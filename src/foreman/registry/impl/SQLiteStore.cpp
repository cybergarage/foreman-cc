/******************************************************************
 *
 * Foreman for C++
 *
 * Copyright (C) 2017 Satoshi Konno
 *
 * This is licensed under BSD-style license, see file COPYING.
 *
 ******************************************************************/

#include <foreman/registry/impl/SQLStore.h>

using namespace Foreman::Registry;

////////////////////////////////////////////////
// SQLiteStore
////////////////////////////////////////////////

SQLiteStore::SQLiteStore()
{
  db_ = NULL;
}

SQLiteStore::~SQLiteStore()
{
}

////////////////////////////////////////////////
// getVersion
////////////////////////////////////////////////

const char* SQLiteStore::getType()
{
  return "SQLite";
}

////////////////////////////////////////////////
// open
////////////////////////////////////////////////

bool SQLiteStore::open()
{
  if (sqlite3_open(":memory:", &db_) != SQLITE_OK)
    return false;

  return true;
}

////////////////////////////////////////////////
// isOpened
////////////////////////////////////////////////

bool SQLiteStore::isOpened()
{
  if (!db_)
    return false;

  return true;
}

////////////////////////////////////////////////
// close
////////////////////////////////////////////////

bool SQLiteStore::close()
{
  if (!db_)
    return false;

  if (sqlite3_close(db_) != SQLITE_OK)
    return false;

  return true;
}

////////////////////////////////////////////////
// setObject
////////////////////////////////////////////////

bool SQLiteStore::setObject(Object* obj, Error* err)
{
  return false;
}

////////////////////////////////////////////////
// getObject
////////////////////////////////////////////////

bool SQLiteStore::getObject(const std::string& objID, Error* err)
{
  return false;
}

////////////////////////////////////////////////
// deleteObject
////////////////////////////////////////////////

bool SQLiteStore::deleteObject(const std::string& objID, Error* err)
{
  return false;
}

////////////////////////////////////////////////
// browse
////////////////////////////////////////////////

bool SQLiteStore::browse(Query* q, Properties* props, Error* err)
{
  return false;
}

////////////////////////////////////////////////
// search
////////////////////////////////////////////////

bool SQLiteStore::search(Query* q, Properties* props, Error* err)
{
  return false;
}
